 window.CustomNotification = { show: function(message, type = 'success', duration = 3000) { const toast = document.createElement('div'); toast.className = `custom-toast ${type === 'error' ? 'error' : type === 'warning' ? 'warning' : ''}`; let icon = 'âœ“'; if (type === 'error') icon = 'âœ—'; else if (type === 'warning') icon = 'âš '; else if (type === 'info') icon = 'â„¹'; toast.innerHTML = ` <div class="icon">${icon}</div> <div class="message">${message}</div> <button class="close-btn" onclick="this.parentElement.remove()">Ã—</button> `; document.body.appendChild(toast); setTimeout(() => { toast.style.animation = 'slideOut 0.3s ease-out'; setTimeout(() => { if (toast.parentNode) { document.body.removeChild(toast); } }, 300); }, duration); }, success: function(message, duration) { this.show(message, 'success', duration); }, error: function(message, duration) { this.show(message, 'error', duration); }, warning: function(message, duration) { this.show(message, 'warning', duration); }, info: function(message, duration) { this.show(message, 'info', duration); } }; document.addEventListener('DOMContentLoaded', function() { window.addEventListener('showToast', function(event) { const data = Array.isArray(event.detail) ? event.detail[0] : event.detail; const type = data.type || 'success'; const message = data.message || data.title || 'ØªÙ…Øª Ø§Ù„Ø¹Ù…Ù„ÙŠØ© Ø¨Ù†Ø¬Ø§Ø­'; CustomNotification.show(message, type); }); window.addEventListener('notify', function(event) { const { message, type } = event.detail; CustomNotification.show(message, type); }); }); document.addEventListener('DOMContentLoaded', function() { if ('IntersectionObserver' in window) { const imageObserver = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { const img = entry.target; img.classList.add('loading'); if (img.dataset.src) { img.src = img.dataset.src; img.removeAttribute('data-src'); } img.addEventListener('load', () => { img.classList.remove('loading'); img.classList.add('loaded'); }); observer.unobserve(img); } }); }, { rootMargin: '50px 0px', threshold: 0.01 }); const lazyImages = document.querySelectorAll('img[loading="lazy"]'); lazyImages.forEach(img => { img.setAttribute('loading', 'lazy'); imageObserver.observe(img); }); const mutationObserver = new MutationObserver(mutations => { mutations.forEach(mutation => { mutation.addedNodes.forEach(node => { if (node.nodeType === 1) { if (node.tagName === 'IMG' && node.getAttribute('loading') === 'lazy') { imageObserver.observe(node); } const images = node.querySelectorAll('img[loading="lazy"]'); images.forEach(img => imageObserver.observe(img)); } }); }); }); mutationObserver.observe(document.body, { childList: true, subtree: true }); } }); document.addEventListener('DOMContentLoaded', function() { function throttle(func, wait) { let timeout; return function executedFunction(...args) { const later = () => { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; } document.querySelectorAll('a[href^="#"]').forEach(anchor => { anchor.addEventListener('click', function (e) { e.preventDefault(); const target = document.querySelector(this.getAttribute('href')); if (target) { target.scrollIntoView({ behavior: 'smooth', block: 'start' }); } }); }); let ticking = false; function updateScrollPosition() { ticking = false; } function requestTick() { if (!ticking) { window.requestAnimationFrame(updateScrollPosition); ticking = true; } } window.addEventListener('scroll', throttle(requestTick, 100)); }); function preloadImage(url) { const link = document.createElement('link'); link.rel = 'preload'; link.as = 'image'; link.href = url; document.head.appendChild(link); } document.addEventListener('DOMContentLoaded', function() { const criticalImages = [ '/images/logo.png', '/images/logo.svg' ]; criticalImages.forEach(url => preloadImage(url)); }); document.addEventListener('DOMContentLoaded', function() { const scrollToTopBtn = document.querySelector('.scroll-to-top'); const scrollIndicator = document.querySelector('.scroll-indicator'); function toggleScrollToTop() { if (window.pageYOffset > 300) { scrollToTopBtn.classList.add('visible'); } else { scrollToTopBtn.classList.remove('visible'); } } function updateScrollProgress() { const windowHeight = window.innerHeight; const documentHeight = document.documentElement.scrollHeight - windowHeight; const scrolled = window.pageYOffset; const progress = (scrolled / documentHeight) * 100; if (scrollIndicator) { scrollIndicator.style.transform = `scaleX(${progress / 100})`; } } let ticking = false; function handleScroll() { if (!ticking) { window.requestAnimationFrame(() => { toggleScrollToTop(); updateScrollProgress(); ticking = false; }); ticking = true; } } window.addEventListener('scroll', handleScroll); toggleScrollToTop(); updateScrollProgress(); }); window.adjustBodyPaddingForHeader = function(isSticky) { const header = document.querySelector('.theme-header'); const body = document.body; if (!header) { console.error('Universal Header Fix: .theme-header element not found.'); return; } if (isSticky) { requestAnimationFrame(() => { const headerHeight = header.offsetHeight; body.style.paddingTop = `${headerHeight}px`; }); } else { body.style.paddingTop = '0px'; } }; document.addEventListener('DOMContentLoaded', () => { const isInitiallySticky = window.pageYOffset > 100; window.adjustBodyPaddingForHeader(isInitiallySticky); }); document.addEventListener('DOMContentLoaded', function() { const header = document.querySelector('.theme-header'); const body = document.body; if (!header) return; function updateHeaderHeight() { const headerHeight = header.offsetHeight; document.documentElement.style.setProperty('--header-height', `${headerHeight}px`); } let lastScrollTop = 0; let isSticky = false; function handleScroll() { const scrollTop = window.pageYOffset || document.documentElement.scrollTop; if (scrollTop > 100 && !isSticky) { isSticky = true; header.classList.add('sticky-header'); body.classList.add('has-sticky-header'); updateHeaderHeight(); } else if (scrollTop <= 100 && isSticky) { isSticky = false; header.classList.remove('sticky-header'); body.classList.remove('has-sticky-header'); } lastScrollTop = scrollTop; } updateHeaderHeight(); handleScroll(); window.addEventListener('scroll', handleScroll, { passive: true }); window.addEventListener('resize', updateHeaderHeight); const mobileMenuButton = document.querySelector('[x-on\\:click="open = !open"]'); const mobileMenu = document.querySelector('.mobile-nav-menu'); const mobileOverlay = document.querySelector('.mobile-menu-overlay'); if (mobileMenuButton && window.innerWidth <= 768) { mobileMenuButton.addEventListener('click', function(e) { e.stopPropagation(); const isOpen = body.classList.contains('menu-open'); if (!isOpen) { body.classList.add('menu-open'); if (mobileMenu) { mobileMenu.style.display = 'block'; setTimeout(() => { mobileMenu.style.right = '0'; }, 10); } if (mobileOverlay) { mobileOverlay.style.display = 'block'; } } else { body.classList.remove('menu-open'); if (mobileMenu) { mobileMenu.style.right = '-320px'; setTimeout(() => { mobileMenu.style.display = 'none'; }, 300); } if (mobileOverlay) { mobileOverlay.style.display = 'none'; } } }); if (mobileOverlay) { mobileOverlay.addEventListener('click', function() { body.classList.remove('menu-open'); if (mobileMenu) { mobileMenu.style.right = '-320px'; setTimeout(() => { mobileMenu.style.display = 'none'; }, 300); } mobileOverlay.style.display = 'none'; }); } } }); window.adjustBodyPaddingForHeader = function(isSticky) { const header = document.querySelector('.theme-header'); const body = document.body; if (!header) return; if (isSticky) { requestAnimationFrame(() => { const headerHeight = header.offsetHeight; document.documentElement.style.setProperty('--header-height', `${headerHeight}px`); body.classList.add('has-sticky-header'); }); } else { body.classList.remove('has-sticky-header'); } }; document.addEventListener('DOMContentLoaded', function() { setTimeout(() => { initializeMobileMenu(); }, 100); }); function initializeMobileMenu() { const mobileMenuButton = document.querySelector('.mobile-menu-btn'); const mobileMenu = document.querySelector('.mobile-nav-menu'); const mobileOverlay = document.querySelector('.mobile-menu-overlay'); const body = document.body; if (!mobileMenuButton || !mobileMenu || !mobileOverlay) { setTimeout(() => { const retryButton = document.querySelector('.mobile-menu-btn'); const retryMenu = document.querySelector('.mobile-nav-menu'); const retryOverlay = document.querySelector('.mobile-menu-overlay'); if (retryButton && retryMenu && retryOverlay) { setupMobileMenu(retryButton, retryMenu, retryOverlay); } }, 500); return; } setupMobileMenu(mobileMenuButton, mobileMenu, mobileOverlay); } function setupMobileMenu(button, menu, overlay) { const body = document.body; button.replaceWith(button.cloneNode(true)); const mobileMenuButton = document.querySelector('.mobile-menu-btn'); function openMenu() { menu.style.display = 'block'; overlay.style.display = 'block'; menu.style.right = '-100%'; void menu.offsetHeight; body.classList.add('menu-open'); requestAnimationFrame(() => { menu.style.transition = 'right 0.3s ease'; overlay.style.transition = 'opacity 0.3s ease'; menu.style.right = '0'; overlay.style.opacity = '1'; menu.classList.add('menu-active'); overlay.classList.add('overlay-active'); }); if (window.Alpine) { const alpineData = Alpine.$data(mobileMenuButton.closest('[x-data]')); if (alpineData) { alpineData.open = true; } } } function closeMenu() { menu.classList.remove('menu-active'); overlay.classList.remove('overlay-active'); menu.style.right = '-100%'; overlay.style.opacity = '0'; setTimeout(() => { body.classList.remove('menu-open'); menu.style.display = 'none'; overlay.style.display = 'none'; }, 300); if (window.Alpine) { const alpineData = Alpine.$data(mobileMenuButton.closest('[x-data]')); if (alpineData) { alpineData.open = false; } } } function toggleMenu() { const isOpen = menu.style.display === 'block' && menu.style.right === '0px'; if (isOpen) { closeMenu(); } else { openMenu(); } } mobileMenuButton.addEventListener('click', function(e) { e.preventDefault(); e.stopPropagation(); toggleMenu(); }); overlay.addEventListener('click', function(e) { e.preventDefault(); closeMenu(); }); const closeButton = document.querySelector('.mobile-nav-close-btn'); if (closeButton) { closeButton.addEventListener('click', function(e) { e.preventDefault(); closeMenu(); }); } const menuLinks = document.querySelectorAll('.mobile-nav-link, .mobile-sub-nav-link'); menuLinks.forEach(link => { link.addEventListener('click', function() { setTimeout(closeMenu, 100); }); }); document.addEventListener('keydown', function(e) { if (e.key === 'Escape' && menu.style.display === 'block') { closeMenu(); } }); window.addEventListener('resize', function() { if (window.innerWidth > 768 && menu.style.display === 'block') { closeMenu(); } }); } 